(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{312:function(t,e,i){t.exports=i.p+"assets/img/misc.32340cb8.png"},313:function(t,e,i){t.exports=i.p+"assets/img/nvram.3f3258a7.png"},314:function(t,e,i){t.exports=i.p+"assets/img/kernel.551d68e3.png"},315:function(t,e,i){t.exports=i.p+"assets/img/aptio-iv-booter.4026eeaf.png"},316:function(t,e,i){t.exports=i.p+"assets/img/aptio-iv-uefi.d17368e9.png"},391:function(t,e,i){t.exports=i.p+"assets/img/acpi.bb42662f.png"},392:function(t,e,i){t.exports=i.p+"assets/img/DeviceProperties.83762e5c.png"},393:function(t,e,i){t.exports=i.p+"assets/img/smbios.4aeabc88.png"},550:function(t,e,i){"use strict";i.r(e);var a=i(25),l=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"laptop-haswell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#laptop-haswell"}},[t._v("#")]),t._v(" Laptop Haswell")]),t._v(" "),a("ul",[a("li",[t._v("Supported version: 0.5.9")])]),t._v(" "),a("p",[a("extoc")],1),t._v(" "),a("h2",{attrs:{id:"starting-point"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#starting-point"}},[t._v("#")]),t._v(" Starting Point")]),t._v(" "),a("p",[t._v("So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("All properties must be defined")]),t._v(", there are no default OpenCore will fall back on so "),a("strong",[t._v("do not delete sections unless told explicitly so")]),t._v(". If the guide doesn't mention the option, leave it at default.")]),t._v(" "),a("li",[a("strong",[t._v("The Sample.plist cannot be used As-Is")]),t._v(", you must configure it to your system")]),t._v(" "),a("li",[a("strong",[t._v("DO NOT USE CONFIGURATORS")]),t._v(", these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!")])]),t._v(" "),a("p",[t._v("Now with all that, a quick reminder of the tools we need")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ProperTree"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("Universal plist editor")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenSMBIOS"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("For generating our SMBIOS data")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sample/config.plist"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("See previous section on how to obtain: "),a("RouterLink",{attrs:{to:"/config.plist/"}},[t._v("config.plist Setup")])],1)])])]),t._v(" "),a("p",[a("strong",[t._v("And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.")])]),t._v(" "),a("h2",{attrs:{id:"acpi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acpi"}},[t._v("#")]),t._v(" ACPI")]),t._v(" "),a("p",[a("img",{attrs:{src:i(391),alt:"ACPI"}})]),t._v(" "),a("h3",{attrs:{id:"add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" Add")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("This is where you'll add SSDTs for your system, these are very important to "),a("strong",[t._v("booting macOS")]),t._v(" and have many uses like "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/usb/",target:"_blank",rel:"noopener noreferrer"}},[t._v("USB maps"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("disabling unsupported GPUs"),a("OutboundLink")],1),t._v(" and such. And with our system, "),a("strong",[t._v("its even required to boot")]),t._v(". Guide on making them found here: "),a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Getting started with ACPI")]),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("For us we'll need a couple of SSDTs to bring back functionality that Clover provided:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Required_SSDTs")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-PLUG"),a("OutboundLink")],1)])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Allows for native CPU power management on Haswell and newer, see "),a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started With ACPI Guide"),a("OutboundLink")],1),t._v(" for more details.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-EC"),a("OutboundLink")],1)])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Fixes the embedded controller, see "),a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started With ACPI Guide"),a("OutboundLink")],1),t._v(" for more details.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[a("a",{attrs:{href:"https://github.com/dortania/Getting-Started-With-ACPI/blob/master/extra-files/decompiled/SSDT-GPI0.dsl.zip",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-GPIO"),a("OutboundLink")],1)])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Creates a stub so VoodooI2C can connect, for those having troubles getting VoodooI2C working can try "),a("a",{attrs:{href:"https://github.com/dortania/Getting-Started-With-ACPI/blob/master/extra-files/compiled/SSDT-XOSI.aml",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-XOSI"),a("OutboundLink")],1),t._v(" instead")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-PNLF"),a("OutboundLink")],1)])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Fixes brightness control, see "),a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started With ACPI Guide"),a("OutboundLink")],1),t._v(" for more details.")])])])]),t._v(" "),a("p",[t._v("Note that you "),a("strong",[t._v("should not")]),t._v(" add your generated "),a("code",[t._v("DSDT.aml")]),t._v(" here, it is already in your firmware. So if present, remove the entry for it in your "),a("code",[t._v("config.plist")]),t._v(" and under EFI/OC/ACPI.")]),t._v(" "),a("p",[t._v("For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the "),a("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Getting started with ACPI")]),a("OutboundLink")],1),t._v(" "),a("strong",[t._v("page.")]),t._v(" Compiled SSDTs have a "),a("strong",[t._v(".aml")]),t._v(" extension(Assembled) and will go into the "),a("code",[t._v("EFI/OC/ACPI")]),t._v(" folder and "),a("strong",[t._v("must")]),t._v(" be specified in your config under "),a("code",[t._v("ACPI -> Add")]),t._v(" as well.")])]),t._v(" "),a("h3",{attrs:{id:"delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),a("p",[t._v("This blocks certain ACPI tables from loading, for us we can ignore this.")]),t._v(" "),a("h3",{attrs:{id:"patch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:")]),t._v(" "),a("ul",[a("li",[t._v("OSI rename\n"),a("ul",[a("li",[t._v("This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, "),a("strong",[t._v("this is not needed if you're using SSDT-GPIO")])])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Change _OSI to XOSI")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Count")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Limit")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Find")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("5f4f5349")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Replace")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("584f5349")])])])])]),t._v(" "),a("h3",{attrs:{id:"quirks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quirks"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),a("p",[t._v("Settings relating to ACPI, leave everything here as default as we have no use for these quirks.")]),t._v(" "),a("h2",{attrs:{id:"booter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#booter"}},[t._v("#")]),t._v(" Booter")]),t._v(" "),a("p",[a("img",{attrs:{src:i(315),alt:"Booter"}})]),t._v(" "),a("p",[t._v("This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi")]),t._v(" "),a("h3",{attrs:{id:"mmiowhitelist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mmiowhitelist"}},[t._v("#")]),t._v(" MmioWhitelist")]),t._v(" "),a("p",[t._v("This section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with "),a("code",[t._v("DevirtualiseMmio")])]),t._v(" "),a("h3",{attrs:{id:"quirks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quirks-2"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("Settings relating to boot.efi patching and firmware fixes, for us, we leave it as default")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("AvoidRuntimeDefrag")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Fixes UEFI runtime services like date, time, NVRAM, power control, etc")])])]),t._v(" "),a("li",[a("strong",[t._v("EnableWriteUnprotector")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Needed to remove write protection from CR0 register.")])])]),t._v(" "),a("li",[a("strong",[t._v("SetupVirtualMap")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Fixes SetVirtualAddresses calls to virtual addresses, not needed on Skylake and newer")])])])])]),t._v(" "),a("h2",{attrs:{id:"deviceproperties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deviceproperties"}},[t._v("#")]),t._v(" DeviceProperties")]),t._v(" "),a("p",[a("img",{attrs:{src:i(392),alt:"DeviceProperties"}})]),t._v(" "),a("h3",{attrs:{id:"add-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-2"}},[t._v("#")]),t._v(" Add")]),t._v(" "),a("p",[t._v("Sets device properties from a map.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("PciRoot(0x0)/Pci(0x2,0x0)")]),t._v(" "),a("p",[t._v("This section is set up via WhateverGreen's "),a("a",{attrs:{href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/FAQ.IntelHD.en.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Framebuffer Patching Guide"),a("OutboundLink")],1),t._v(" and is used for setting important iGPU properties.")]),t._v(" "),a("p",[t._v("When setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Device-id")]),t._v(" "),a("ul",[a("li",[t._v("The actual Device ID used by the graphics drivers to figure out if it's an iGPU. If your iGPU isn't natively supported, you can add "),a("code",[t._v("device-id")]),t._v(" to fake it as a native iGPU")])])]),t._v(" "),a("li",[a("strong",[t._v("AAPL,ig-platform-id")]),t._v(" "),a("ul",[a("li",[t._v("This is used internally for setting up the iGPU")])])]),t._v(" "),a("li",[a("strong",[t._v("Stolen Memory")]),t._v(" "),a("ul",[a("li",[t._v("The minimum amount of iGPU memory required for the framebuffer to work correctly")])])]),t._v(" "),a("li",[a("strong",[t._v("Port Count + Connectors")]),t._v(" "),a("ul",[a("li",[t._v("The number of displays and what types are supported")])])])]),t._v(" "),a("p",[t._v("Generally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:")]),t._v(" "),a("ol",[a("li",[t._v("When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough")]),t._v(" "),a("li",[t._v("If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to set device-id as well")])]),t._v(" "),a("p",[t._v("Note that highlighted entries with a star(*) are the recommended entries to use:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("iGPU")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("device-id")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("AAPL,ig-platform-id")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Port Count")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Total Stolen Memory")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Connectors")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Intel HD Graphics 4400")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0A160000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0C00160A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("99MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1 DPx2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("Intel HD Graphics 5000 "),a("sup",[t._v("1")])]),t._v(" *")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0A260000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0500260A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("52MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1 DPx2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("Intel HD Graphics 5000 "),a("sup",[t._v("2")])]),t._v(" *")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0A260000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0600260A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("52MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1 DPx2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Intel Iris Graphics 5100")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0A2E0000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("08002E0A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("99MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1 DPx2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Intel Iris Pro Graphics 5200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0D260000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0700260D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("99MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1 DPx2 HDMIx1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Intel Iris Pro Graphics 5200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0D260000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0900260D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("99MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Intel Iris Pro Graphics 5200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0D260000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0E00260D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("131MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1 DPx2 HDMIx1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Intel Iris Pro Graphics 5200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0D260000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0F00260D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("131MB")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LVDSx1")])])])]),t._v(" "),a("h4",{attrs:{id:"configuration-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-notes"}},[t._v("#")]),t._v(" Configuration Notes")]),t._v(" "),a("ul",[a("li",[a("sup",[t._v("1")]),t._v(": to be used usually with HD5000, HD5100 and HD5200\n"),a("ul",[a("li",[t._v("The device-id of these devices "),a("em",[t._v("should")]),t._v(" be supported already by the native macOS drivers.")])])]),t._v(" "),a("li",[a("sup",[t._v("2")]),t._v(": to be used usually with HD4200, HD4400 and HD4600.\n"),a("ul",[a("li",[t._v("You "),a("strong",[t._v("must")]),t._v(" use "),a("code",[t._v("device-id")]),t._v(" = "),a("code",[t._v("12040000")])])])]),t._v(" "),a("li",[t._v("It is "),a("strong",[t._v("recommended")]),t._v(" to set the cursor byte size for "),a("strong",[t._v("all iGPUs")]),t._v(" as many will experience graphical glitches otherwise:\n"),a("ul",[a("li",[a("code",[t._v("framebuffer-patch-enable")]),t._v(" = "),a("code",[t._v("1")]),t._v(" (as a Number)")]),t._v(" "),a("li",[a("code",[t._v("framebuffer-cursor")]),t._v(" = "),a("code",[t._v("00009000")]),t._v(" (as Data)\n"),a("ul",[a("li",[t._v("We change the cursor byte from 6MB (00006000) to 9MB because of some glitches.")])])])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("PciRoot(0x0)/Pci(0x1b,0x0)")]),t._v(" "),a("p",[a("code",[t._v("layout-id")])]),t._v(" "),a("ul",[a("li",[t._v("Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. "),a("a",{attrs:{href:"https://github.com/acidanthera/AppleALC/wiki/Supported-codecs",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleALC Supported Codecs"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("You can delete this property outright as it's unused for us at this time")])]),t._v(" "),a("p",[t._v("For us, we'll be using the boot argument "),a("code",[t._v("alcid=xxx")]),t._v(" instead to accomplish this. "),a("code",[t._v("alcid")]),t._v(" will override all other layout-IDs present. More info on this is covered in the "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Post-Install Page"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"delete-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-2"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),a("p",[t._v("Removes device properties from the map, for us we can ignore this")]),t._v(" "),a("h2",{attrs:{id:"kernel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kernel"}},[t._v("#")]),t._v(" Kernel")]),t._v(" "),a("p",[a("img",{attrs:{src:i(314),alt:"Kernel"}})]),t._v(" "),a("h3",{attrs:{id:"add-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-3"}},[t._v("#")]),t._v(" Add")]),t._v(" "),a("p",[t._v("Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that "),a("a",{attrs:{href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ProperTree"),a("OutboundLink")],1),t._v(" users can run "),a("strong",[t._v("Cmd/Ctrl + Shift + R")]),t._v(" to add all their kexts in the correct order without manually typing each kext out.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("BundlePath")]),t._v(" "),a("ul",[a("li",[t._v("Name of the kext")]),t._v(" "),a("li",[t._v("ex: "),a("code",[t._v("Lilu.kext")])])])]),t._v(" "),a("li",[a("strong",[t._v("Enabled")]),t._v(" "),a("ul",[a("li",[t._v("Self-explanatory, either enables or disables the kext")])])]),t._v(" "),a("li",[a("strong",[t._v("ExecutablePath")]),t._v(" "),a("ul",[a("li",[t._v("Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting "),a("code",[t._v("Show Package Contents")]),t._v(". Generally, they'll be "),a("code",[t._v("Contents/MacOS/Kext")]),t._v(" but some have kexts hidden within under "),a("code",[t._v("Plugin")]),t._v(" folder. Do note that plist only kexts do not need this filled in.")]),t._v(" "),a("li",[t._v("ex: "),a("code",[t._v("Contents/MacOS/Lilu")])])])]),t._v(" "),a("li",[a("strong",[t._v("PlistPath")]),t._v(" "),a("ul",[a("li",[t._v("Path to the "),a("code",[t._v("info.plist")]),t._v(" hidden within the kext")]),t._v(" "),a("li",[t._v("ex: "),a("code",[t._v("Contents/Info.plist")])])])])]),t._v(" "),a("h3",{attrs:{id:"emulate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emulate"}},[t._v("#")]),t._v(" Emulate")]),t._v(" "),a("p",[t._v("Needed for spoofing unsupported CPUs like Pentiums and Celerons")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("CpuidMask")]),t._v(": Leave this blank")]),t._v(" "),a("li",[a("strong",[t._v("CpuidData")]),t._v(": Leave this blank")])]),t._v(" "),a("h3",{attrs:{id:"block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block"}},[t._v("#")]),t._v(" Block")]),t._v(" "),a("p",[t._v("Blocks certain kexts from loading. Not relevant for us.")]),t._v(" "),a("h3",{attrs:{id:"patch-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patch-2"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),a("p",[t._v("Patches both the kernel and kexts.")]),t._v(" "),a("h3",{attrs:{id:"quirks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quirks-3"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("Settings relating to the kernel, for us we'll be enabling the following:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("AppleCpuPmCfgLock")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Not needed if "),a("code",[t._v("CFG-Lock")]),t._v(" is disabled in the BIOS")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("AppleXcpmCfgLock")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Not needed if "),a("code",[t._v("CFG-Lock")]),t._v(" is disabled in the BIOS")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("DisableIOMapper")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Not needed if "),a("code",[t._v("VT-D")]),t._v(" is disabled in the BIOS")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LapicKernelPanic")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("HP Machines will require this quirk")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("PanicNoKextDump")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("PowerTimeoutKernelPanic")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("XhciPortLimit")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("AppleCpuPmCfgLock")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. "),a("strong",[t._v("Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk")])])])]),t._v(" "),a("li",[a("strong",[t._v("AppleXcpmCfgLock")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. "),a("strong",[t._v("Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk")])])])]),t._v(" "),a("li",[a("strong",[t._v("CustomSMBIOSGuid")]),t._v(": NO\n"),a("ul",[a("li",[t._v("Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops")])])]),t._v(" "),a("li",[a("strong",[t._v("DisableIoMapper")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to "),a("code",[t._v("dart=0")]),t._v(" as SIP can stay on in Catalina")])])]),t._v(" "),a("li",[a("strong",[t._v("DisableRtcChecksum")]),t._v(": NO\n"),a("ul",[a("li",[t._v("Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown")])])]),t._v(" "),a("li",[a("strong",[t._v("LapicKernelPanic")]),t._v(": NO\n"),a("ul",[a("li",[t._v("Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is "),a("code",[t._v("Kernel LAPIC")])])])]),t._v(" "),a("li",[a("strong",[t._v("PanicNoKextDump")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Allows for reading kernel panics logs when kernel panics occur")])])]),t._v(" "),a("li",[a("strong",[t._v("PowerTimeoutKernelPanic")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.")])])]),t._v(" "),a("li",[a("strong",[t._v("XhciPortLimit")]),t._v(": YES\n"),a("ul",[a("li",[t._v("This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/usb/",target:"_blank",rel:"noopener noreferrer"}},[t._v("USB map"),a("OutboundLink")],1),t._v(" when possible.")])])])]),t._v(" "),a("p",[t._v("The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such")])]),t._v(" "),a("h2",{attrs:{id:"misc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#misc"}},[t._v("#")]),t._v(" Misc")]),t._v(" "),a("p",[a("img",{attrs:{src:i(312),alt:"Misc"}})]),t._v(" "),a("h3",{attrs:{id:"boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boot"}},[t._v("#")]),t._v(" Boot")]),t._v(" "),a("p",[t._v("Settings for boot screen (Leave everything as default).")]),t._v(" "),a("h3",{attrs:{id:"debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[t._v("#")]),t._v(" Debug")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("Helpful for debugging OpenCore boot issues(We'll be changing everything "),a("em",[t._v("but")]),t._v(" "),a("code",[t._v("DisplayDelay")]),t._v("):")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("AppleDebug")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ApplePanic")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("DisableWatchDog")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Target")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("67")])])])])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("AppleDebug")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer")])])]),t._v(" "),a("li",[a("strong",[t._v("ApplePanic")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Attempts to log kernel panics to disk")])])]),t._v(" "),a("li",[a("strong",[t._v("DisableWatchDog")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Disables the UEFI watchdog, can help with early boot issues")])])]),t._v(" "),a("li",[a("strong",[t._v("Target")]),t._v(": "),a("code",[t._v("67")]),t._v(" "),a("ul",[a("li",[t._v("Shows more debug information, requires debug version of OpenCore")])])]),t._v(" "),a("li",[a("strong",[t._v("DisplayLevel")]),t._v(": "),a("code",[t._v("2147483650")]),t._v(" "),a("ul",[a("li",[t._v("Shows even more debug information, requires debug version of OpenCore")])])])]),t._v(" "),a("p",[t._v("These values are based of those calculated in "),a("RouterLink",{attrs:{to:"/troubleshooting/debug.html"}},[t._v("OpenCore debugging")])],1)]),t._v(" "),a("h3",{attrs:{id:"security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security"}},[t._v("#")]),t._v(" Security")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("Security is pretty self-explanatory, "),a("strong",[t._v("do not skip")]),t._v(". We'll be changing the following:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("AllowNvramReset")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("AllowSetDefault")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Vault")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Optional")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ScanPolicy")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("AllowNvramReset")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Allows for NVRAM reset both in the boot picker and when pressing "),a("code",[t._v("Cmd+Opt+P+R")])])])]),t._v(" "),a("li",[a("strong",[t._v("AllowSetDefault")]),t._v(": YES\n"),a("ul",[a("li",[t._v("Allow "),a("code",[t._v("CTRL+Enter")]),t._v(" and "),a("code",[t._v("CTRL+Index")]),t._v(" to set default boot device in the picker")])])]),t._v(" "),a("li",[a("strong",[t._v("AuthRestart")]),t._v(": NO\n"),a("ul",[a("li",[t._v("Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional")])])]),t._v(" "),a("li",[a("strong",[t._v("BlacklistAppleUpdate")]),t._v(": True\n"),a("ul",[a("li",[t._v("Ignores Apple's firmware updater, recommended to enable as to avoid issues with installs and updates")])])]),t._v(" "),a("li",[a("strong",[t._v("BootProtect")]),t._v(": None\n"),a("ul",[a("li",[t._v("Allows the use of Bootstrap.efi inside EFI/OC/Bootstrap instead of BOOTx64.efi, useful for those wanting to either boot with rEFInd or avoid BOOTx64.efi overwrites from Windows. Proper use of this quirks is not be covered in this guide")])])]),t._v(" "),a("li",[a("strong",[t._v("ExposeSensitiveData")]),t._v(": "),a("code",[t._v("6")]),t._v(" "),a("ul",[a("li",[t._v("Shows more debug information, requires debug version of OpenCore")])])]),t._v(" "),a("li",[a("strong",[t._v("Vault")]),t._v(": "),a("code",[t._v("Optional")]),t._v(" "),a("ul",[a("li",[t._v("We won't be dealing vaulting so we can ignore, "),a("strong",[t._v("you won't boot with this set to Secure")])]),t._v(" "),a("li",[t._v("This is a word, it is not optional to omit this setting. You will regret it if you don't set it to "),a("code",[t._v("Optional")]),t._v(", note that it is case-sensitive")])])]),t._v(" "),a("li",[a("strong",[t._v("ScanPolicy")]),t._v(": "),a("code",[t._v("0")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("0")]),t._v(" allows you to see all drives available, please refer to "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/security.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security"),a("OutboundLink")],1),t._v(" section for further details. "),a("strong",[t._v("Will not boot USB devices with this set to default")])])])])])]),t._v(" "),a("h3",{attrs:{id:"tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[t._v("#")]),t._v(" Tools")]),t._v(" "),a("p",[t._v("Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.")]),t._v(" "),a("h3",{attrs:{id:"entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entries"}},[t._v("#")]),t._v(" Entries")]),t._v(" "),a("p",[t._v("Used for specifying irregular boot paths that can't be found naturally with OpenCore.")]),t._v(" "),a("p",[t._v("Won't be covered here, see 8.6 of "),a("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Configuration.pdf"),a("OutboundLink")],1),t._v(" for more info")]),t._v(" "),a("h2",{attrs:{id:"nvram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nvram"}},[t._v("#")]),t._v(" NVRAM")]),t._v(" "),a("p",[a("img",{attrs:{src:i(313),alt:"NVRAM"}})]),t._v(" "),a("h3",{attrs:{id:"add-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-4"}},[t._v("#")]),t._v(" Add")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14")]),t._v(" "),a("p",[t._v("Used for OpenCore's UI scaling, default will work for us. See in-depth section for more info")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("p",[t._v("Booter Path, mainly used for UI Scaling")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("UIScale")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("01")]),t._v(": Standard resolution")]),t._v(" "),a("li",[a("code",[t._v("02")]),t._v(": HiDPI (generally required for FileVault to function correctly on smaller displays)")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("DefaultBackgroundColor")]),t._v(": Background color used by boot.efi")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("00000000")]),t._v(": Syrah Black")]),t._v(" "),a("li",[a("code",[t._v("BFBFBF00")]),t._v(": Light Gray")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("7C436110-AB2A-4BBB-A880-FE41995C9F82")]),t._v(" "),a("p",[t._v("System Integrity Protection bitmask")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("General Purpose boot-args")]),t._v(":")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("boot-args")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("-v")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("This enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("debug=0x100")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("This disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can "),a("em",[t._v("hopefully")]),t._v(" glean some useful info and follow the breadcrumbs to get past the issues.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("keepsyms=1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("This is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("alcid=1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Used for setting layout-id for AppleALC, see "),a("a",{attrs:{href:"https://github.com/acidanthera/applealc/wiki/supported-codecs",target:"_blank",rel:"noopener noreferrer"}},[t._v("supported codecs"),a("OutboundLink")],1),t._v(" to figure out which layout to use for your specific system. More info on this is covered in the "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Post-Install Page"),a("OutboundLink")],1)])])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("GPU-Specific boot-args")]),t._v(":")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("boot-args")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("-wegnoegpu")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Used for disabling all other GPUs than the integrated Intel iGPU, useful for those wanting to run newer versions of macOS where their dGPU isn't supported")])])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("csr-active-config")]),t._v(": Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with "),a("code",[t._v("csrutil")]),t._v(" via the recovery partition.")])]),t._v(" "),a("p",[t._v("csr-active-config by default is set to "),a("code",[t._v("00000000")]),t._v(" which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/troubleshooting.html#disabling-sip",target:"_blank",rel:"noopener noreferrer"}},[t._v("Disabling SIP"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("nvda_drv")]),t._v(": <>\n"),a("ul",[a("li",[t._v("For enabling Nvidia Web Drivers, set to 31 if running a "),a("a",{attrs:{href:"https://github.com/khronokernel/Catalina-GPU-Buyers-Guide/blob/master/README.md#Unsupported-nVidia-GPUs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maxwell or Pascal GPU"),a("OutboundLink")],1),t._v(". This is the same as setting nvda_drv=1 but instead we translate it from "),a("a",{attrs:{href:"https://www.browserling.com/tools/hex-to-text",target:"_blank",rel:"noopener noreferrer"}},[t._v("text to hex"),a("OutboundLink")],1),t._v(", Clover equivalent is "),a("code",[t._v("NvidiaWeb")]),t._v(". "),a("strong",[t._v("AMD, Intel and Kepler GPU users should delete this section.")])])])]),t._v(" "),a("li",[a("strong",[t._v("prev-lang:kbd")]),t._v(": <>\n"),a("ul",[a("li",[t._v("Needed for non-latin keyboards in the format of "),a("code",[t._v("lang-COUNTRY:keyboard")]),t._v(", recommended to keep blank though you can specify it("),a("strong",[t._v("Default in Sample config is Russian")]),t._v("):")]),t._v(" "),a("li",[t._v("American: "),a("code",[t._v("en-US:0")]),t._v("("),a("code",[t._v("656e2d55533a30")]),t._v(" in HEX)")]),t._v(" "),a("li",[t._v("Full list can be found in "),a("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/AppleKeyboardLayouts/AppleKeyboardLayouts.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleKeyboardLayouts.txt"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Hint: "),a("code",[t._v("prev-lang:kbd")]),t._v(" can be changed into a String so you can input "),a("code",[t._v("en-US:0")]),t._v(" directly instead of converting to HEX")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("prev-lang:kbd")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("en-US:0")])])])])]),t._v(" "),a("h3",{attrs:{id:"delete-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-3"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),a("p",[t._v("Forcibly rewrites NVRAM variables, do note that "),a("code",[t._v("Add")]),t._v(" "),a("strong",[t._v("will not overwrite")]),t._v(" values already present in NVRAM so values like "),a("code",[t._v("boot-args")]),t._v(" should be left alone.")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("LegacyEnable")]),t._v(": NO")]),t._v(" "),a("ul",[a("li",[t._v("Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("LegacyOverwrite")]),t._v(": NO")]),t._v(" "),a("ul",[a("li",[t._v("Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("LegacySchema")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("Used for assigning NVRAM variables, used with LegacyEnable set to YES")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("WriteFlash")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Enables writing to flash memory for all added variables.")])])])]),t._v(" "),a("h2",{attrs:{id:"platforminfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#platforminfo"}},[t._v("#")]),t._v(" PlatformInfo")]),t._v(" "),a("p",[a("img",{attrs:{src:i(393),alt:"PlatformInfo"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("For setting up the SMBIOS info, we'll use CorpNewt's "),a("a",{attrs:{href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenSMBIOS"),a("OutboundLink")],1),t._v(" application.")]),t._v(" "),a("p",[t._v("For this Haswell example, we chose the MacBookPro11,1 SMBIOS. The typical breakdown is as follows:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("SMBIOS")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("CPU Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("GPU Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Display Size")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookAir6,1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Dual Core 15w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: HD 5000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('11"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookAir6,2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Dual Core 15w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: HD 5000")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('13"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookPro11,1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Dual Core 28w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: Iris 5100")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('13"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookPro11,2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Quad Core 45w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: Iris Pro 5200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('15"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookPro11,3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Quad Core 45w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: Iris Pro 5200 + dGPU: GT750M")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('15"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookPro11,4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Quad Core 45w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: Iris Pro 5200")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('15"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("MacBookPro11,5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Quad Core 45w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("iGPU: Iris Pro 5200 + dGPU: R9 M370X")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('15"')])])])]),t._v(" "),a("p",[a("strong",[t._v("Note")]),t._v(": Mobile users should refer to the SMBIOS page on which to choose: "),a("a",{attrs:{href:"https://github.com/dortania/Opencore-Install-Guide/blob/master/extras/smbios.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mobile SMBIOS"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS.  This will give us an output similar to the following:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  #######################################################\n #               MacBookPro11,1 SMBIOS Info                  #\n#######################################################\n\nType:         MacBookPro11,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n")])])]),a("p",[t._v("The "),a("code",[t._v("Type")]),t._v(" part gets copied to Generic -> SystemProductName.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Serial")]),t._v(" part gets copied to Generic -> SystemSerialNumber.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Board Serial")]),t._v(" part gets copied to Generic -> MLB.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("SmUUID")]),t._v(" part gets copied to Generic -> SystemUUID.")]),t._v(" "),a("p",[t._v("We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use "),a("code",[t._v("11223300 0000")]),t._v(". After install follow the "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fixing iServices"),a("OutboundLink")],1),t._v(" page on how to find your real MAC Address)")]),t._v(" "),a("h5",{attrs:{id:"reminder-that-you-want-either-an-invalid-serial-or-valid-serial-numbers-but-those-not-in-use-you-want-to-get-a-message-back-like-invalid-serial-or-purchase-date-not-validated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reminder-that-you-want-either-an-invalid-serial-or-valid-serial-numbers-but-those-not-in-use-you-want-to-get-a-message-back-like-invalid-serial-or-purchase-date-not-validated"}},[t._v("#")]),t._v(' Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: "Invalid Serial" or "Purchase Date not Validated"')]),t._v(" "),a("p",[a("a",{attrs:{href:"https://checkcoverage.apple.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apple Check Coverage page"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("Automatic")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections")])])]),t._v(" "),a("h3",{attrs:{id:"generic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic"}},[t._v("#")]),t._v(" Generic")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("SpoofVendor")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("AdviseWindows")]),t._v(": NO")]),t._v(" "),a("ul",[a("li",[t._v("Used for when the EFI partition isn't first on the Windows drive")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("UpdateDataHub")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Update Data Hub fields")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("UpdateNVRAM")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Update NVRAM fields")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("UpdateSMBIOS")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Updates SMBIOS fields")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("UpdateSMBIOSMode")]),t._v(": Create")]),t._v(" "),a("ul",[a("li",[t._v("Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk")])])])])]),t._v(" "),a("h2",{attrs:{id:"uefi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uefi"}},[t._v("#")]),t._v(" UEFI")]),t._v(" "),a("p",[a("img",{attrs:{src:i(316),alt:"UEFI"}})]),t._v(" "),a("p",[a("strong",[t._v("ConnectDrivers")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.")])]),t._v(" "),a("h3",{attrs:{id:"drivers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drivers"}},[t._v("#")]),t._v(" Drivers")]),t._v(" "),a("p",[t._v("Add your .efi drivers here.")]),t._v(" "),a("p",[t._v("Only drivers present here should be:")]),t._v(" "),a("ul",[a("li",[t._v("HfsPlus.efi")]),t._v(" "),a("li",[t._v("OpenRuntime.efi")])]),t._v(" "),a("h3",{attrs:{id:"apfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apfs"}},[t._v("#")]),t._v(" APFS")]),t._v(" "),a("p",[t._v("Settings related to the APFS driver, leave everything here as default.")]),t._v(" "),a("h3",{attrs:{id:"audio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#audio"}},[t._v("#")]),t._v(" Audio")]),t._v(" "),a("p",[t._v("Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.")]),t._v(" "),a("ul",[a("li",[t._v("For further use of AudioDxe and the Audio section, please see the Post Install page: "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Add GUI and Boot-chime"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" Input")]),t._v(" "),a("p",[t._v("Related to boot.efi keyboard pass-through used for FileVault and Hotkey support.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("KeyFiltering")]),t._v(": NO\n"),a("ul",[a("li",[t._v("Verifies and discards uninitialized data, mainly prevalent on 7 series Gigabyte boards")])])]),t._v(" "),a("li",[a("strong",[t._v("KeyForgetThreshold")]),t._v(": "),a("code",[t._v("5")]),t._v(" "),a("ul",[a("li",[t._v("The delay between each key input when holding a key down, for best results use "),a("code",[t._v("5")]),t._v(" milliseconds")])])]),t._v(" "),a("li",[a("strong",[t._v("KeyMergeThreshold")]),t._v(": "),a("code",[t._v("2")]),t._v(" "),a("ul",[a("li",[t._v("The length of time that a key will be registered before resetting, for best results use "),a("code",[t._v("2")]),t._v(" milliseconds")])])]),t._v(" "),a("li",[a("strong",[t._v("KeySupport")]),t._v(": "),a("code",[t._v("YES")]),t._v(" "),a("ul",[a("li",[t._v("Enables OpenCore's built in key support and "),a("strong",[t._v("required for boot picker selection")]),t._v(", do not use with OpenUsbKbDxe.efi")])])]),t._v(" "),a("li",[a("strong",[t._v("KeySupportMode")]),t._v(": "),a("code",[t._v("Auto")]),t._v(" "),a("ul",[a("li",[t._v("Keyboard translation for OpenCore")])])]),t._v(" "),a("li",[a("strong",[t._v("KeySwap")]),t._v(": "),a("code",[t._v("NO")]),t._v(" "),a("ul",[a("li",[t._v("Swaps "),a("code",[t._v("Option")]),t._v(" and "),a("code",[t._v("Cmd")]),t._v(" key")])])]),t._v(" "),a("li",[a("strong",[t._v("PointerSupport")]),t._v(": "),a("code",[t._v("NO")]),t._v(" "),a("ul",[a("li",[t._v("Used for fixing broken pointer support, commonly used for Z87 Asus boards")])])]),t._v(" "),a("li",[a("strong",[t._v("PointerSupportMode")]),t._v(":\n"),a("ul",[a("li",[t._v("Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank")])])]),t._v(" "),a("li",[a("strong",[t._v("TimerResolution")]),t._v(": "),a("code",[t._v("50000")]),t._v(" "),a("ul",[a("li",[t._v("Set architecture timer resolution, Asus Z87 boards use "),a("code",[t._v("60000")]),t._v(" for the interface. Settings to "),a("code",[t._v("0")]),t._v(" can also work for some")])])])]),t._v(" "),a("h3",{attrs:{id:"output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" Output")]),t._v(" "),a("p",[t._v("Relating to OpenCore's visual output,  leave everything here as default as we have no use for these quirks.")]),t._v(" "),a("h3",{attrs:{id:"protocoloverrides"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocoloverrides"}},[t._v("#")]),t._v(" ProtocolOverrides")]),t._v(" "),a("p",[t._v("Mainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security and FileVault"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"quirks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quirks-4"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),a("p",[t._v("Relating to quirks with the UEFI environment, for us we'll be changing the following:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("IgnoreInvalidFlexRatio")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ReleaseUsbOwnership")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("UnblockFsConnect")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Needed mainly by HP motherboards")])])])])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("More in-depth Info")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("DeduplicateBootOrder")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Request fallback of some Boot prefixed variables from "),a("code",[t._v("OC_VENDOR_VARIABLE_GUID")]),t._v(" to "),a("code",[t._v("EFI_GLOBAL_VARIABLE_GUID")]),t._v(". Used for fixing boot options.")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("IgnoreInvalidFlexRatio")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ReleaseUsbOwnership")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("RequestBootVarRouting")]),t._v(": YES")]),t._v(" "),a("ul",[a("li",[t._v("Redirects AptioMemoryFix from "),a("code",[t._v("EFI_GLOBAL_VARIABLE_GUID")]),t._v(" to "),a("code",[t._v("OC\\_VENDOR\\_VARIABLE\\_GUID")]),t._v(". Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("UnblockFsConnect")]),t._v(": NO")]),t._v(" "),a("ul",[a("li",[t._v("Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed")])])])])]),t._v(" "),a("h3",{attrs:{id:"reservedmemory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reservedmemory"}},[t._v("#")]),t._v(" ReservedMemory")]),t._v(" "),a("p",[t._v("Used for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide")]),t._v(" "),a("h2",{attrs:{id:"cleaning-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-up"}},[t._v("#")]),t._v(" Cleaning up")]),t._v(" "),a("p",[t._v("And now you're ready to save and place it into your EFI under EFI/OC.")]),t._v(" "),a("p",[t._v("For those having booting issues, please make sure to read the "),a("a",{attrs:{href:"https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/troubleshooting.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Troubleshooting section"),a("OutboundLink")],1),t._v(" first and if your questions are still unanswered we have plenty of resources at your disposal:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.reddit.com/r/hackintosh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("r/Hackintosh Subreddit"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://discord.gg/2QYd7ZT",target:"_blank",rel:"noopener noreferrer"}},[t._v("r/Hackintosh Discord"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("Sanity check")]),t._v(":")]),t._v(" "),a("p",[t._v("So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something:")]),t._v(" "),a("h3",{attrs:{id:"config-reminders"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config-reminders"}},[t._v("#")]),t._v(" Config reminders")]),t._v(" "),a("p",[a("strong",[t._v("HP Users")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("Kernel -> Quirks -> LapicKernelPanic -> True\n"),a("ul",[a("li",[t._v("You will get a kernel panic on LAPIC otherwise")])])]),t._v(" "),a("li",[t._v("UEFI -> Quirks -> UnblockFsConnect -> True")])]),t._v(" "),a("h2",{attrs:{id:"intel-bios-settings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intel-bios-settings"}},[t._v("#")]),t._v(" Intel BIOS settings")]),t._v(" "),a("h3",{attrs:{id:"disable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disable"}},[t._v("#")]),t._v(" Disable")]),t._v(" "),a("ul",[a("li",[t._v("Fast Boot")]),t._v(" "),a("li",[t._v("Secure Boot")]),t._v(" "),a("li",[t._v("VT-d (can be enabled if you set "),a("code",[t._v("DisableIoMapper")]),t._v(" to YES)")]),t._v(" "),a("li",[t._v("CSM")]),t._v(" "),a("li",[t._v("Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)")]),t._v(" "),a("li",[t._v("Intel SGX")]),t._v(" "),a("li",[t._v("Intel Platform Trust")]),t._v(" "),a("li",[t._v("CFG Lock (MSR 0xE2 write protection)("),a("strong",[t._v("This must be off, if you can't find the option then enable both "),a("code",[t._v("AppleCpuPmCfgLock")]),t._v(" and "),a("code",[t._v("AppleXcpmCfgLock")]),t._v(" under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled")]),t._v(")")])]),t._v(" "),a("h3",{attrs:{id:"enable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable"}},[t._v("#")]),t._v(" Enable")]),t._v(" "),a("ul",[a("li",[t._v("VT-x")]),t._v(" "),a("li",[t._v("Above 4G decoding")]),t._v(" "),a("li",[t._v("Hyper-Threading")]),t._v(" "),a("li",[t._v("Execute Disable Bit")]),t._v(" "),a("li",[t._v("EHCI/XHCI Hand-off")]),t._v(" "),a("li",[t._v("OS type: Windows 8.1/10 UEFI Mode")]),t._v(" "),a("li",[t._v("DVMT Pre-Allocated(iGPU Memory): 64MB")]),t._v(" "),a("li",[t._v("SATA Mode: AHCI")])]),t._v(" "),a("h2",{attrs:{id:"now-with-all-this-done-head-to-the-installation-page"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#now-with-all-this-done-head-to-the-installation-page"}},[t._v("#")]),t._v(" Now with all this done, head to the "),a("RouterLink",{attrs:{to:"/installation/installation-process.html"}},[t._v("Installation Page")])],1)])}),[],!1,null,null,null);e.default=l.exports}}]);